#!/usr/bin/env python3

import threading
import queue
import time as t
import numpy as np
import rospy
import cv_bridge
import cv_resize
from sensor_msgs.msg import Image


class SegmentationNode():
    """docstring for SegmentationNode"""
    def __init__(self):
        super(SegmentationNode, self).__init__()

        model_param = rospy.get_param("~model", "mnv2_bdd100k_driveable_513")
        self._topic_image = rospy.get_param("~topic_image", "image_raw")
        self._topic_semantic = rospy.get_param("~topic_semantic", "semantic")
        self._topic_semantic_color = rospy.get_param("~topic_semantic_color", "semantic_color")

        self._scale = rospy.get_param("~scale", 1.0)
        rate_param = rospy.get_param("~rate", 30.0)
        self._rate = rospy.Rate(rate_param)
        self._output_rate = rospy.Rate(rate_param)

        self._model = getattr(
            __import__("models", globals(), locals(), fromlist=[model_param]),
            model_param
        ).Model()
        rospy.set_param("semantic_categories", self._model.categories)

        self._subscriber_image = rospy.Subscriber(
            self._topic_image, Image, self._image_callback
        )
        self._publisher_semantic = rospy.Publisher(
            self._topic_semantic, Image, queue_size=1
        )
        self._publisher_semantic_color = rospy.Publisher(
            self._topic_semantic_color, Image, queue_size=1
        )

        self._input_image_queue = queue.Queue()
        self._output_image_queue = queue.Queue()

        self._inference_thread = threading.Thread(
            target=self._inference_thread_func,
            args=(),
            daemon=True
        )
        self._inference_thread.start()

        self._output_thread = threading.Thread(
            target=self._output_thread_func,
            args=(),
            daemon=True
        )
        self._output_thread.start()

    def close(self):
        self._inference_thread.join()
        self._output_thread.join()


    def _image_callback(self, msg):
        with self._input_image_queue.mutex:
            self._input_image_queue.queue.clear()

        header = msg.header
        cv_image = cv_bridge.imgmsg_to_cv2(msg)
        cv_image = self._down_scale(cv_image)

        self._input_image_queue.put({
            "header": header,
            "cv_image": cv_image
        })

    def _output_thread_func(self):
        while not rospy.is_shutdown():
            self._output_rate.sleep()

            next_output_image = None

            try:
                next_output_image = self._output_image_queue.get(block=False)
            except queue.Empty:
                pass

            if next_output_image is None:
                continue

            header = next_output_image["header"]
            semantic = next_output_image["semantic"]

            if self._publisher_semantic.get_num_connections() > 0:
                output_image = semantic.astype(np.uint8)
                output_image = self._up_scale(output_image)
                m = cv_bridge.cv2_to_imgmsg(output_image, encoding="mono8")
                m.header.stamp.secs = header.stamp.secs
                m.header.stamp.nsecs = header.stamp.nsecs
                self._publisher_semantic.publish(m)

            if self._publisher_semantic_color.get_num_connections() > 0:
                output_image = self._model.color_map[semantic.astype(np.uint8)]
                output_image = self._up_scale(output_image)
                m = cv_bridge.cv2_to_imgmsg(output_image, encoding="rgb8")
                m.header.stamp.secs = header.stamp.secs
                m.header.stamp.nsecs = header.stamp.nsecs
                self._publisher_semantic_color.publish(m)

    def _inference_thread_func(self):

        while not rospy.is_shutdown():
            self._rate.sleep()

            next_image_message = None

            try:
                next_image_message = self._input_image_queue.get(block=False)
            except queue.Empty:
                pass

            if next_image_message is None:
                continue

            header = next_image_message["header"]
            cv_image = next_image_message["cv_image"]
            semantic = self._model.infer([cv_image])[0]

            with self._output_image_queue.mutex:
                self._output_image_queue.queue.clear()

            self._output_image_queue.put({
                "header": header,
                "semantic": semantic
            })


    def _down_scale(self, cv_image):
        if self._scale == 1.0:
            return cv_image

        h, w = cv_image.shape[:2]
        h = int(h * self._scale)
        w = int(w * self._scale)
        return cv_resize.resize(cv_image, (w, h))

    def _up_scale(self, cv_image):
        if self._scale == 1.0:
            return cv_image

        h, w = cv_image.shape[:2]
        h = int(h / self._scale)
        w = int(w / self._scale)
        return cv_resize.resize(cv_image, (w, h))



if __name__ == "__main__":
    rospy.init_node("segmentation_node")

    NODE = SegmentationNode()

    rospy.spin()

    NODE.close()
